"""
Django settings for attender project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path


from urllib.parse import quote_plus


import os

import requests
from requests.auth import HTTPDigestAuth
import ssl
from urllib3 import PoolManager
from requests.adapters import HTTPAdapter




username = quote_plus("it24akashmondal")
password = quote_plus("akashmondal@2004")








# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9mx3q)5e5e&s5z2dp!&dr6l7=caqtpm82+)g#0*#7+*cf=$!dh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#to handle our ssl problem 

import requests
import ssl
from requests.auth import HTTPDigestAuth
from urllib3 import PoolManager
from requests.adapters import HTTPAdapter


ALLOWED_HOSTS = ["127.0.0.1",'localhost']

# Application definition

INSTALLED_APPS = [
    'home.apps.HomeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',  
    'allauth.account', 
    # 'allauth.socialaccount',
    # 'allauth.socialaccount.providers.google',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'attender.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [BASE_DIR / "templates",
#     "/var/www/templates/",],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",  # Your project-level templates directory
            "/var/www/templates/",    # Additional templates directory (if needed)
        ],
        'APP_DIRS': True,  # Enable Django to look for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'home_extras': 'home.templatetags.home_extras',  # Register your custom template tags
            },
        },
    },
]
WSGI_APPLICATION = 'attender.wsgi.application'

import os
import ssl
from pymongo import MongoClient
import urllib.parse

# Dummy DATABASES entry (required for Django)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # Dummy SQLite DB (Django requires this)
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),  # Use SQLite to bypass Django DB check
    }
}

# Fetch credentials from environment variables
MONGO_USERNAME = "it24akashmondal"
MONGO_PASSWORD = "akashmondal@2004"

if not MONGO_USERNAME or not MONGO_PASSWORD:
    raise ValueError("MongoDB credentials are missing! Set MONGO_USERNAME and MONGO_PASSWORD as environment variables.")

# Encode username & password for MongoDB connection
username = urllib.parse.quote_plus(MONGO_USERNAME)
password = urllib.parse.quote_plus(MONGO_PASSWORD)

# MongoDB connection string
MONGO_URI = f"mongodb+srv://{username}:{password}@cluster007.oznj7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster007"

# Connect to MongoDB
client = MongoClient(MONGO_URI, tls=True, tlsAllowInvalidCertificates=True)
db = client["attender_db"]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#my code.....-->


BASE_DIR = Path(__file__).resolve().parent.parent  # Correct way to define BASE_DIR

# Fix the static files path
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Now `BASE_DIR` is a Path object, so "/" works
]
# AUTH_USER_MODEL = 'home.CustomUser'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'allauth.account.auth_backends.AuthenticationBackend', 
    "home.backends.MongoDBAuthBackend",# for google

]

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'http://435911279724-168fv9h4fp7et2ku14fst8ekfkth9p7r.apps.googleusercontent.com',
            'secret': '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',
            'key': ''
        }
    }
}

LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'game'
ACCOUNT_LOGOUT_REDIRECT_URL = 'login'


SESSION_ENGINE = "django.contrib.sessions.backends.db"  # Store session in DB
SESSION_COOKIE_AGE = 86400  # 1 day
SESSION_SAVE_EVERY_REQUEST = True  # Save session after every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session after closing browser
SESSION_COOKIE_SECURE = False  # Make sure HTTPS is not required for local testing
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access
SESSION_COOKIE_NAME = "sessionid"  # Default session cookie name




EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'akashincode@gmail.com'  # ✅ replace with your Gmail
EMAIL_HOST_PASSWORD = 'shhcptofonbjbhcw'  # ✅ your 16-digit App Password
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
