"""
Django settings for attender project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path


from urllib.parse import quote_plus


import os

import requests
from requests.auth import HTTPDigestAuth
import ssl
from urllib3 import PoolManager
from requests.adapters import HTTPAdapter




username = quote_plus("it24akashmondal")
password = quote_plus("akashmondal@2004")








# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9mx3q)5e5e&s5z2dp!&dr6l7=caqtpm82+)g#0*#7+*cf=$!dh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#to handle our ssl problem 

import requests
import ssl
from requests.auth import HTTPDigestAuth
from urllib3 import PoolManager
from requests.adapters import HTTPAdapter

# import requests
# import ssl
# from requests.auth import HTTPDigestAuth
# from urllib3 import PoolManager
# from requests.adapters import HTTPAdapter


# class SSLAdapter(HTTPAdapter):
#     def init_poolmanager(self, *args, **kwargs):
#         context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
#         context.minimum_version = ssl.TLSVersion.TLSv1_2  # Enforce TLS 1.2+
#         kwargs['ssl_context'] = context
#         return super().init_poolmanager(*args, **kwargs)


# def get_public_ip():
#     try:
#         response = requests.get("https://api.ipify.org", timeout=5)
#         response.raise_for_status()
#         return response.text.strip()
#     except requests.RequestException:
#         return "127.0.0.1"  # Fallback


# # MongoDB Atlas credentials
# atlas_group_id = "66f86957de0a821439162b09"
# atlas_api_key_public = "hojzbmzo"
# atlas_api_key_private = "a6799ea9-5dc6-4b3c-bd73-7ddc5088de56"

# # Get public IP
# ip = get_public_ip()

# session = requests.Session()
# session.mount("https://", SSLAdapter())  # Use custom SSL adapter

# try:
#     # Adding public IP to MongoDB Atlas access list
#     resp = session.post(
#         f"https://cloud.mongodb.com/api/atlas/v1.0/groups/{atlas_group_id}/accessList",
#         auth=HTTPDigestAuth(atlas_api_key_public, atlas_api_key_private),
#         json=[{'ipAddress': ip, 'comment': 'from Alumner@PythonAnywhere'}],
#         timeout=10
#     )

#     if resp.status_code in (200, 201):
#         print("MongoDB Atlas accessList request successful", flush=True)
#     else:
#         print(
#             f"MongoDB Atlas accessList request problem: status code {resp.status_code}, content {resp.content}",
#             flush=True
#         )

# except requests.exceptions.SSLError as e:
#     print(f"SSL Error: {e}")
# except requests.exceptions.RequestException as e:
#     print(f"Request Error: {e}")

ALLOWED_HOSTS = ["127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'home.apps.HomeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'attender.urls'

# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [BASE_DIR / "templates",
#     "/var/www/templates/",],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates",  # Your project-level templates directory
            "/var/www/templates/",    # Additional templates directory (if needed)
        ],
        'APP_DIRS': True,  # Enable Django to look for templates in app directories
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'libraries': {
                'home_extras': 'home.templatetags.home_extras',  # Register your custom template tags
            },
        },
    },
]
WSGI_APPLICATION = 'attender.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'djongo',
        'NAME': 'attender_db',
        'CLIENT': {
            'host': f'mongodb+srv://{username}:{password}@cluster007.oznj7.mongodb.net/?retryWrites=true&w=majority&appName=Cluster007'
         ,'tls': True,
            'tlsAllowInvalidCertificates': True,
            'tlsCAFile': ssl.get_default_verify_paths().cafile
        }
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#my code.....-->
STATICFILES_DIRS = [
    BASE_DIR / "static",
    "/var/www/static/",
]